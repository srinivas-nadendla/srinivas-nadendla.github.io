{"version":3,"sources":["shared/Constants.js","components/TodoList.js","components/AddRec.js","App.js","serviceWorker.js","index.js"],"names":["ToDoData","title","time","description","id","Colors","ToDoList","props","state","selectedItems","handleSelection","bind","className","this","toDoData","map","item","index","key","style","display","isOpened","name","onChange","type","onClick","onListItemClcik","minWidth","borderLeft","Math","floor","random","length","e","target","selected","checked","push","indexOf","splice","setState","selectedRec","React","Component","AddRec","isEdit","handleInputChange","redirectToHomePage","value","width","onSubmit","event","App","isAdd","searchVal","handleCheckSelction","onSearch","onSelectClick","onCancelClick","onDeleteClick","onAddClick","placeholder","forEach","recIndex","findIndex","rec","Number","formValues","data","i","newRec","Date","getTime","concat","filter","toLowerCase","search","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9a62501.chunk.js","sourcesContent":["export const ToDoData = [\r\n    {\r\n      title: 'Goa trip',\r\n      time: \"Today\",\r\n      description: 'Have to plan a trip to goa in  next month',\r\n      id: 100\r\n    },\r\n    {\r\n      title: 'Meeting',\r\n      time: \"Today\",\r\n      description: 'Need to schedule a meeting with team',\r\n      id: 101\r\n    },\r\n    {\r\n      title: 'Groceries',\r\n      time: \"Today\",\r\n      description: 'Have to order groceries',\r\n      id: 102\r\n    },\r\n    {\r\n      title: 'Goa trip',\r\n      time: \"Today\",\r\n      description: 'Have to plan a trip to goa in  next month',\r\n      id: 103\r\n    },\r\n    {\r\n      title: 'Meeting',\r\n      time: \"Today\",\r\n      description: 'Need to schedule a meeting with team',\r\n      id: 104\r\n    }\r\n  ];\r\n  export const Colors = [\r\n    '#F4B400',\r\n    '#0F9D58',\r\n    '#DB4437',\r\n    '#FFB900',\r\n    '#00A4EF'\r\n]","import React from \"react\";\r\nimport './TodoList.css'\r\nimport { Colors } from '../shared/Constants';\r\n\r\nclass ToDoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedItems: []\r\n        };\r\n        this.handleSelection = this.handleSelection.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-list-container\">\r\n                {this.props.toDoData.map((item, index) => (\r\n                    <div key={index}>\r\n                        <div style={{ display: this.props.isOpened? 'inline-block': 'none' }}>\r\n                            <input id={item.id} name='check' onChange={this.handleSelection} type=\"checkbox\"/>\r\n                        </div>\r\n                        <div className=\"todo-list-item\" onClick={this.onListItemClcik.bind(this,item)} style={{\r\n                            display: this.props.isOpened?'inline-block': 'block', minWidth: '90%',\r\n                            borderLeft: `5px solid ${Colors[Math.floor(Math.random() * Colors.length)]}`}}\r\n                        >\r\n                            <div>\r\n                                <div>\r\n                                    <span className=\"todo-list-title\">{item.title}</span>\r\n                                    <span className=\"todo-list-time\">{item.time}</span>\r\n                                </div>\r\n                                <div className=\"todo-list-desc\">{item.description}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleSelection(e) {\r\n        let target = e.target;\r\n        let selected= this.state.selectedItems;\r\n        if(target.checked) {\r\n            selected.push(target.id)\r\n        } else {\r\n            let index = selected.indexOf(target.id);\r\n            if(index > -1) {\r\n                selected.splice(index, 1);\r\n            }\r\n        }\r\n        this.setState({\r\n            selectedItems: selected \r\n        });\r\n        this.props.handleSelection(this.state.selectedItems);\r\n\r\n    }\r\n\r\n    onListItemClcik(selectedRec) {\r\n        this.props.onListItemClcik(selectedRec);\r\n    }\r\n}\r\nexport default ToDoList;","import React from 'react';\r\nclass AddRec extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: props.isEdit? props.selectedRec.title: '',\r\n            description: props.isEdit? props.selectedRec.description:'',\r\n            id: props.isEdit? props.selectedRec.id:''\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div><i className=\"fas fa-arrow-left\" onClick={()=>{this.props.redirectToHomePage()}}></i></div>\r\n                <div>Title: <input type=\"text\" onChange={this.handleInputChange} value={this.state.title} name=\"title\"></input></div>\r\n                <div>Description:</div>\r\n                <textarea name=\"description\" onChange={this.handleInputChange} value={this.state.description}  style={{ width: '100%' }}></textarea>\r\n                <button onClick={()=>{\r\n                    this.props.onSubmit(this.state);\r\n                }}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n      }\r\n\r\n      \r\n    \r\n}\r\nexport default AddRec;","import React from 'react';\nimport ToDoList from './components/TodoList';\nimport AddRec from './components/AddRec';\nimport { ToDoData } from './shared/Constants';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpened: false,\n      isAdd: false,\n      toDoData: ToDoData,\n      selectedItems: [],\n      searchVal: '',\n      isEdit: false,\n      selectedRec: {}\n    }\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleCheckSelction = this.handleCheckSelction.bind(this);\n    this.redirectToHomePage = this.redirectToHomePage.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.onListItemClcik = this.onListItemClcik.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"todo-main-container\">\n\n\n        {this.state.isAdd ? <AddRec selectedRec={this.state.selectedRec} isEdit={this.state.isEdit} redirectToHomePage={this.redirectToHomePage} onSubmit={this.onSubmit} /> :\n          <div>\n            <div className=\"todo-btn-bar\">\n              <div className=\"todo-btn-bar-west\">\n                <span style={{ display: this.state.isOpened ? 'none' : 'block' }}\n                  onClick={() => {\n                    this.onSelectClick()\n                  }}\n                >Select</span>\n                <span style={{ display: this.state.isOpened ? 'block' : 'none' }}\n                  onClick={() => {\n                    this.onCancelClick()\n                  }}\n                >Cancel</span>\n              </div>\n              <div className=\"todo-btn-bar-east\">\n                {this.state.isOpened\n                  ? <i onClick={() => { this.onDeleteClick() }} className=\"fas fa-trash\"></i>\n                  : <i onClick={() => { this.onAddClick() }} className=\"fas fa-plus-circle\"></i>}\n              </div>\n            </div>\n\n            <div className=\"todo-header\">ToDo</div>\n\n            <div className=\"todo-search-box\">\n              <i className=\"fas fa-search\"></i>\n              <input name=\"searchVal\" onChange={this.onSearch} type=\"text\" placeholder=\"Search\"></input>\n            </div>\n            <ToDoList onListItemClcik={this.onListItemClcik} handleSelection={this.handleCheckSelction} isOpened={this.state.isOpened} toDoData={this.state.toDoData}></ToDoList>\n          </div>\n        }\n\n      </div>\n    );\n  }\n\n  onSelectClick() {\n    this.setState({ isOpened: true });\n  }\n\n  onCancelClick() {\n    this.setState({ isOpened: false });\n  }\n\n  onDeleteClick() {\n    let toDoData = this.state.toDoData;\n    this.state.selectedItems.forEach(id => {\n      let recIndex = toDoData.findIndex(rec => {\n        return rec.id === Number(id)\n      });\n      toDoData.splice(recIndex, 1);\n    })\n    this.setState({ toDoData: toDoData, isOpened: false });\n  }\n\n  onAddClick() {\n    this.setState({ isAdd: true })\n  }\n\n  onSubmit(formValues) {\n    if (this.state.isEdit) {\n      let data = this.state.toDoData;\n      for (let i = 0; i < data.length; i++) {\n        if (Number(formValues.id) === Number(data[i].id)) {\n          data[i].title = formValues.title;\n          data[i].description = formValues.description;\n        }\n      }\n      this.setState(state => ({\n        isAdd: false,\n        isEdit: false,\n        toDoData: data\n      }))\n    } else {\n      let newRec = [\n        {\n          title: formValues.title,\n          time: 'Today',\n          description: formValues.description,\n          id: new Date().getTime()\n        }\n      ];\n      this.setState(state => ({\n        isAdd: false,\n        isEdit: false,\n        toDoData: newRec.concat(state.toDoData)\n      }))\n    }\n\n\n  }\n\n  handleCheckSelction(selectedItems) {\n    this.setState({\n      selectedItems: selectedItems\n    })\n  }\n\n  redirectToHomePage() {\n    this.setState({\n      isAdd: false,\n      isEdit: false\n    })\n  }\n\n  onSearch(e) {\n    let target = e.target;\n    let data = ToDoData;\n    if (target.value.length > 0) {\n      data = data.filter((rec) => {\n        return rec.title.toLowerCase().search(target.value.toLowerCase()) !== -1\n      });\n    }\n    this.setState({ toDoData: data });\n  }\n\n  onListItemClcik(selectedRec) {\n    this.setState({ isAdd: true, isEdit: true, selectedRec: selectedRec });\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}